{"version":3,"sources":["../src/connection.js"],"names":["debug","DEBUG_LIBNAME","Connection","socket","req","logger","requests","url","ip","connection","remoteAddress","headers","id","message","protocol","on","msg","onMessage","err","console","info","messageType","messageId","commandNameOrPayload","commandPayload","errorDetails","JSON","parse","Error","CALL_MESSAGE","CALLRESULT_MESSAGE","CALLERROR_MESSAGE","CommandModel","commands","commandRequest","responseData","responseObj","sendError","OCPPError","ERROR_FORMATIONVIOLATION","onRequest","createResponse","sendMessage","responseCallback","rejectCallback","command","error","ERROR_INTERNALERROR","self","commandValues","resolve","reject","messageToSend","onResponse","onRejectResponse","commandName","getCommandName","code","details","readyState","Websocket","OPEN","send","setTimeout","SOCKET_TIMEOUT","payload","response","reason","request"],"mappings":"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","file":"connection.js","sourcesContent":["import {v4} from 'uuid';\r\nimport Websocket from 'ws';\r\nimport debugFn from 'debug';\r\nimport commands from './commands';\r\nimport {\r\n  DEBUG_LIBNAME,\r\n  CALL_MESSAGE,\r\n  CALLRESULT_MESSAGE,\r\n  CALLERROR_MESSAGE,\r\n  SOCKET_TIMEOUT\r\n} from './constants';\r\nimport { getObjectValues } from './helpers';\r\nimport OCPPError, {\r\n  ERROR_FORMATIONVIOLATION,\r\n  ERROR_INTERNALERROR\r\n} from './ocppError';\r\n\r\nconst debug = debugFn(DEBUG_LIBNAME);\r\n\r\nexport\r\nclass Connection {\r\n  constructor (socket, req = null, logger = null) {\r\n    this.socket = socket;\r\n    this.req = req;\r\n    this.requests = {};\r\n    this.logger = logger;\r\n\r\n    if (req) {\r\n      this.url = req && req.url;\r\n      const ip = req && ((req.connection && req.connection.remoteAddress) || req.headers[ 'x-forwarded-for' ]);\r\n\r\n      if (this.logger) {\r\n        this.logger.debug({ id: this.url, message: `New connection from \"${ip}\", protocol \"${socket.protocol}\", url \"${this.url}\"` });\r\n      } else {\r\n        debug(`New connection from \"${ip}\", protocol \"${socket.protocol}\", url \"${this.url}\"`);\r\n      }\r\n    } else {\r\n      this.url = 'SERVER';\r\n      debug(`New connection to server`);\r\n    }\r\n\r\n    socket.on('message', (msg) => this.onMessage(msg));\r\n\r\n    socket.on('error', (err) => {\r\n      console.info(err);\r\n    });\r\n  }\r\n\r\n  async onMessage (message) {\r\n    let messageType, messageId, commandNameOrPayload, commandPayload, errorDetails;\r\n\r\n    try {\r\n      [messageType, messageId, commandNameOrPayload, commandPayload, errorDetails] = JSON.parse(message);\r\n    } catch (err) {\r\n      throw new Error(`Failed to parse message: \"${message}\", ${err.message}`);\r\n    }\r\n\r\n    switch (messageType) {\r\n      case CALL_MESSAGE:\r\n        // request\r\n        if (this.logger) {\r\n          this.logger.debug(`>> ${this.url}: ${message}`);\r\n        } else {\r\n          debug(`>> ${this.url}: ${message}`);\r\n        }\r\n\r\n        const CommandModel = commands[commandNameOrPayload];\r\n        if (!CommandModel) {\r\n          throw new Error(`Unknown command ${commandNameOrPayload}`);\r\n        }\r\n        let commandRequest, responseData, responseObj;\r\n        try {\r\n          commandRequest = new CommandModel(commandPayload);\r\n        } catch (err) {\r\n          // send error if payload didn't pass the validation\r\n          return await this.sendError(messageId, new OCPPError(ERROR_FORMATIONVIOLATION, err.message));\r\n        }\r\n\r\n        try {\r\n          responseData = await this.onRequest(commandRequest);\r\n          responseObj = commandRequest.createResponse(responseData);\r\n        } catch (err) {\r\n          return await this.sendError(messageId, err);\r\n        }\r\n\r\n        try {\r\n          await this.sendMessage(messageId, responseObj, CALLRESULT_MESSAGE);\r\n        } catch (err) {\r\n          await this.sendError(messageId, err);\r\n        }\r\n        break;\r\n      case CALLRESULT_MESSAGE:\r\n        // response\r\n        if (this.logger) {\r\n          this.logger.debug(`>> ${this.url}: ${message}`);\r\n        } else {\r\n          debug(`>> ${this.url}: ${message}`);\r\n        }\r\n\r\n        const [responseCallback] = this.requests[messageId];\r\n        if (!responseCallback) {\r\n          throw new Error(`Response for unknown message ${messageId}`);\r\n        }\r\n        delete this.requests[messageId];\r\n\r\n        responseCallback(commandNameOrPayload);\r\n        break;\r\n      case CALLERROR_MESSAGE:\r\n        // error response\r\n        if (this.logger) {\r\n          this.logger.debug(`>> ${this.url}: ${message}`);\r\n        } else {\r\n          debug(`>> ${this.url}: ${message}`);\r\n        }\r\n\r\n        if (!this.requests[messageId]) {\r\n          throw new Error(`Response for unknown message ${messageId}`);\r\n        }\r\n        const [, rejectCallback] = this.requests[messageId];\r\n        delete this.requests[messageId];\r\n\r\n        rejectCallback(new OCPPError(commandNameOrPayload, commandPayload, errorDetails));\r\n        break;\r\n      default:\r\n        throw new Error(`Wrong message type ${messageType}`);\r\n    }\r\n  }\r\n\r\n  send (command, messageType = CALL_MESSAGE) {\r\n    return this.sendMessage(v4(), command, messageType);\r\n  }\r\n\r\n  sendError (messageId, err) {\r\n    if (this.logger) {\r\n      this.logger.debug(`Error: ${err.message}`);\r\n    } else {\r\n      debug(`Error: ${err.message}`);\r\n    }\r\n\r\n    const error = err instanceof OCPPError ? err : new OCPPError(ERROR_INTERNALERROR, err.message);\r\n\r\n    return this.sendMessage(messageId, error, CALLERROR_MESSAGE);\r\n  }\r\n\r\n  sendMessage (messageId, command, messageType = CALLRESULT_MESSAGE) {\r\n    const socket = this.socket;\r\n    const self = this;\r\n    const commandValues = getObjectValues(command);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let messageToSend;\r\n\r\n      switch (messageType) {\r\n        case CALL_MESSAGE:\r\n          this.requests[messageId] = [onResponse, onRejectResponse];\r\n          const commandName = command.getCommandName();\r\n\r\n          messageToSend = JSON.stringify([messageType, messageId, commandName, commandValues]);\r\n          break;\r\n        case CALLRESULT_MESSAGE:\r\n          messageToSend = JSON.stringify([messageType, messageId, commandValues]);\r\n          break;\r\n        case CALLERROR_MESSAGE:\r\n          const { code, message, details } = command;\r\n          messageToSend = JSON.stringify([messageType, messageId, code, message, details]);\r\n          break;\r\n      }\r\n\r\n      if (this.logger) {\r\n        this.logger.debug(`<< ${messageToSend}`);\r\n      } else {\r\n        debug(`<< ${messageToSend}`);\r\n      }\r\n\r\n      if (socket.readyState === Websocket.OPEN) {\r\n        socket.send(messageToSend);\r\n      } else {\r\n        return onRejectResponse(`Socket closed ${messageId}`);\r\n      }\r\n      if (messageType !== CALL_MESSAGE) {\r\n        resolve();\r\n      } else {\r\n        setTimeout(() => onRejectResponse(`Timeout for message ${messageId}`), SOCKET_TIMEOUT);\r\n      }\r\n\r\n      function onResponse (payload) {\r\n        const response = command.createResponse(payload);\r\n\r\n        return resolve(response);\r\n      }\r\n      function onRejectResponse(reason) {\r\n        self.requests[messageId] = () => {};\r\n        const error = reason instanceof OCPPError ? reason : new Error(reason);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  onRequest (request) {\r\n\r\n  }\r\n}\r\n"]}